<mxfile host="app.diagrams.net" modified="2020-09-06T17:06:14.333Z" agent="5.0 (X11)" etag="ewqTM_l61-YyJ7aXi-FG" version="13.6.6" type="github">
  <diagram id="L8TuEk9Ee9Zbtea8qNrc" name="Page-1">
    <mxGraphModel dx="1952" dy="623" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="unJenYqaQAGChnfxspGW-1" value="&lt;h1&gt;Generator Overview&lt;br&gt;&lt;/h1&gt;&lt;p&gt;- def) a function that can stop midway and then continue from where it stopped. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; - a function which behaves like an iterator&lt;br&gt;&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- terms)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;generator object&lt;/b&gt;: an iterator which allows you use its functions like &#39;next&#39;, &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;return object&lt;/b&gt;: an object you get when call &#39;next&#39; of a generator object&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - {&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; value: xxx,&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; done: boolean&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- questions)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;&#39;return&#39; in a generator?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - you can use &#39;return&#39; keyword but the generator finish its task and the code after the &#39;return&#39; never exected.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;what if we call &#39;next&#39; after no &#39;yield&#39; anymore?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &#39;undefined&#39; is returned.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;benefits)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;better async code&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - use of &#39;promise&#39; cause a little increase of boilerplate and bad readability (&#39;promise hell&#39;). requires a lot of chains.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp; - if use generators, no more chain and single level of coding.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;infinite data stream&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - it is possible to return infinite number of value&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - use a loop inside a generator&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;generators as observers&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - you can send input to a generator using &#39;next(input)&#39;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;Lazy evaluation&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - calculate on demand. don&#39;t need to calculate in advance. &lt;br&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - &lt;b&gt;increase our capability!!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - here is an interesting code!!&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Caveats:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; - generator objects are one-time access only. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - once it iterate over, you cannot use it again&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp; - not allow to access random value.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - you can skip &#39;yield&#39; or random access to any arbitrary position of &#39;yield&#39;. if you want to access to the position, you need to calculate until there.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="-90" y="20" width="190" height="1470" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-2" value="&lt;div&gt;syntax&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;function * genFunc() {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;yield 1&lt;br&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;yield 2&lt;br&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;yield 3&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;}&lt;br&gt;&lt;/div&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;" vertex="1" parent="1">
          <mxGeometry x="590" y="30" width="210" height="290" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-4" style="rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="unJenYqaQAGChnfxspGW-3" target="unJenYqaQAGChnfxspGW-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-3" value="&lt;div&gt;// get the generator object by calling the function&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;genObj = genFunc();&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// call &#39;next&#39; function and get &#39;return object&#39;&lt;/div&gt;&lt;div&gt;&lt;b&gt;genObj.next()&lt;/b&gt; // { value: 1, done: false }&lt;/div&gt;&lt;div&gt;// the generator pause right after &#39;yield 1&#39; and wait for next &#39;next&#39;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// second &#39;next&#39; and got &#39;2&#39; &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;genObj.next()&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;...&lt;br&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="180" y="80" width="280" height="210" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-5" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 16px&quot;&gt;Benefit 1: async &lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="180" y="380" width="160" height="20" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-6" value="&lt;div&gt;promise base&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;function wrapperFunc() {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;return fetch(url)&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;.then(value =&amp;gt; ...)&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;.then(value =&amp;gt; ...)&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;.catch(error =&amp;gt; ...)&lt;/div&gt;&lt;div&gt;}&lt;br&gt;&lt;/div&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;" vertex="1" parent="1">
          <mxGeometry x="210" y="430" width="210" height="290" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-7" value="&lt;div&gt;generators base&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;function generatorFunc() {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp; yield ...&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp; yield ...&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp; yield ...&lt;br&gt;&lt;/div&gt;}" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;" vertex="1" parent="1">
          <mxGeometry x="590" y="430" width="210" height="290" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-8" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 16px&quot;&gt;Benefit 2: infinite Data Streams&lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="180" y="760" width="290" height="20" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-9" value="&lt;div&gt;generators base&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;function generatorFunc() {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp; let num = 1;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp; &lt;b&gt;while (true) {&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; yield num;&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num = num + 1&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; }&lt;/b&gt;&amp;nbsp; &lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;}&lt;/div&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;" vertex="1" parent="1">
          <mxGeometry x="400" y="810" width="210" height="200" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-10" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 16px&quot;&gt;Benefit 3: Observers&lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="170" y="1060" width="290" height="20" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-14" value="input" style="edgeStyle=none;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="unJenYqaQAGChnfxspGW-11" target="unJenYqaQAGChnfxspGW-13">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-11" value="client" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="255" y="1120" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-16" value="call" style="edgeStyle=none;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="unJenYqaQAGChnfxspGW-13" target="unJenYqaQAGChnfxspGW-15">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-13" value="&lt;div&gt;observer&lt;/div&gt;&lt;div&gt;(generator)&lt;br&gt;&lt;/div&gt;" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="460" y="1120" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-15" value="trigger an action based on the input" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="660" y="1120" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-17" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 16px&quot;&gt;Benefit 4: Lazy Evaluation&lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="170" y="1270" width="290" height="20" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-18" value="&lt;div&gt;assuming that you might need to calculate value1, value 2 and value3, if you don&#39;t have generators, you have to calculate those values in advance, but if you have it, you don&#39;t need to prepare in advance and calculated on demand when it is needed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=&amp;gt; we can defer those calculation&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="200" y="1320" width="610" height="40" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-19" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 16px&quot;&gt;Benefit 5: increase what we can do efficiently!!&lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="170" y="1410" width="480" height="20" as="geometry" />
        </mxCell>
        <mxCell id="unJenYqaQAGChnfxspGW-20" value="&lt;div&gt;&#39;take&#39;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;function * take() {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let index = 0;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (const val of iter) {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (index &amp;gt;= n) {&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index = index + 1;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield val;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;}&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;take(3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;])&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;// a b c&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;take(7, naturalNumbers())&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;// 1 2 3 4 5 6 7&lt;br&gt;&lt;/div&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;" vertex="1" parent="1">
          <mxGeometry x="190" y="1480" width="210" height="270" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
